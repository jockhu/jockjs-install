#!/bin/bash
commond=$1
version=$2
three=$3
sconfigFile=$4
pwdPath=`pwd`
sys=`uname -a | awk -F " " '{print $1}'`

if [ "$commond" = "-h" ];then
    echo ""
    echo ""
    echo "Example..."
    echo ""
    echo "jockjs install [touch | pad | user | developers | broker] domain ApacheNginxConfig"
    echo "  domain (domain eg: jockjs.jockhu.dev.anjuke.com)"
    echo "  apache or nginx config not required."
    echo ""
    echo "jockjs [start | restart | stop] [touch | pad | user | developers | broker]"
    echo ""
    echo "jockjs list"
    echo ""
    echo "jockjs pull [touch | pad | user | developers | broker] co master [jockjs|jockcss|jockjs-components|...]"
    echo ""
    echo ""
    exit;
fi

if [ -z "$three" ];then
    jockjsSite=fp00
else
    jockjsSite=$three
fi
forever=/home/www/bin/forever
jockjsPath=/home/www/release/node
jockjsLogPath=/data1/logs/node
jockjsConfPath=/home/www/config/node

if [ ! -e "$forever" ];then
  forever=/usr/local/bin/forever
else
  forever=forever
fi

function forever_action(){
  if [ "$1" = "start" -o "$1" = "restart" -o "$1" = "reload" ];then
    forever_stop $2
    forever_start $2
  fi
  if [ "$1" = "stop" ];then
    forever_stop $2
  fi
}

function forever_start(){
  if [ -z "$1" ];then
    sitePath=fp00
  else
    sitePath=$1
  fi
  $forever start -a -l $jockjsLogPath/js.log $jockjsPath/$sitePath/jockjs/service.js $jockjsConfPath/$sitePath.js
  $forever start -a -l $jockjsLogPath/css.log $jockjsPath/$sitePath/jockcss/service.js $jockjsConfPath/$sitePath.css
}

function forever_stop(){
  if [ -z "$1" ];then
    sitePath=fp00
  else
    sitePath=$1
  fi
  $forever stop $jockjsPath/$sitePath/jockjs/service.js
  $forever stop $jockjsPath/$sitePath/jockcss/service.js
}

function forever_list(){
  $forever list
}

function git_pull(){
  cd $jockjsPath/$1
  if [[ ! -z "$4" && -e $jockjsPath/$1/$4 ]];then
     echo "current path : $jockjsPath/$1/$4";
     cd $jockjsPath/$1/$4
     git $2 $3
     git branch
     git pull --rebase;
  else
    for path in `ls`
    do
    cd $jockjsPath/$1/$path;
    echo "current path : $jockjsPath/$1/$path";
    if [ ! -z "$2" ];then
        git $2 $3
    fi
    git branch 
    git pull --rebase; 
    done;
  fi
  exit 0 
}

function git_co_master(){
  cd $jockjsPath/$1
  for path in `ls`
  do
    cd $jockjsPath/$1/$path;
    echo "current path : $jockjsPath/$1/$path";
    git co master
    git pull --rebase; 
  done;  
}

function git_install(){
  jockjsSite=$1
  if [ -z "$jockjsSite" ];then
    echo "Missing parameters."
  fi
  
  if [ "$jockjsSite" = "touch" -o "$jockjsSite" = "developers" -o "$jockjsSite" = "pad" -o "$jockjsSite" = "user" -o "$jockjsSite" = "broker" ];then
    jockjsPath=/home/www/release/node/$jockjsSite
    if [ ! -e $jockjsPath ];then
      sudo mkdir -p $jockjsPath
    fi
    
    sudo chown -R $USER:$GROUP $jockjsPath
    echo "Setting jockjs path: $jockjsPath"
    sudo chown -R $USER:$GROUP /usr/local/bin
    sudo chown -R $USER:$GROUP /usr/local/lib
    echo "Chown /usr/local/{bin,lib} finished. "

    cd $jockjsPath
  
    if [ ! -e "$jockjsPath/jockjs-config" ];then
      git clone git@git.corp.anjuke.com:jockhu/jockjs-config
    fi
    if [ ! -e "$jockjsPath/jockjs" ];then
      git clone git@git.corp.anjuke.com:aifang/jockjs
    fi
    if [ ! -e "$jockjsPath/jockcss" ];then
      git clone git@git.corp.anjuke.com:aifang/jockcss
    fi
    if [ ! -e "$jockjsPath/jockjs-components" ];then
      git clone git@git.corp.anjuke.com:site/jockjs-components  
    fi
    if [ "$jockjsSite" = "touch" ];then
      git clone git@git.corp.anjuke.com:site/jockjs-touch
    fi 
    if [ "$jockjsSite" = "pad" ];then
      git clone git@git.corp.anjuke.com:site/jockjs-business-pad
    fi 
    if [ "$jockjsSite" = "developers" ];then
      git clone git@git.corp.anjuke.com:site/jockjs-business-developers
    fi
    if [ "$jockjsSite" = "user" ];then
      git clone git@git.corp.anjuke.com:site/jockjs-business-user
    fi
    if [ "$jockjsSite" = "broker" ];then
      git clone git@git.corp.anjuke.com:site/jockjs-business-broker
    fi
  else
    echo "Parameters error."
  fi
}

function config_install(){
  site=$1
  if [ ! -e $jockjsConfPath ];then
    sudo mkdir -p $jockjsConfPath
    echo "Path $jockjsConfPath created."
  fi
  
  sudo chown -R $USER:$GROUP $jockjsConfPath
  
  if [ ! -e $jockjsConfPath/$site.js ];then
    cp -r $jockjsPath/jockjs-config/conf/$site.js $jockjsConfPath/
    cp -r $jockjsPath/jockjs-config/conf/$site.css $jockjsConfPath/
    echo "Copy config files..."
  fi
}

function config_nginx(){
  domain=$1
  configFile=$2
  #echo "Nginx Config File: $configFile"
  if [ -z "$configFile" ];then
    configFile=/etc/nginx/nginx.conf
  fi 
  if [ -e "$configFile" ];then
    echo "... "
    echo "Nginx setting... "
    echo "Config root: $configFile"
    set_config "$domain" "$configFile" "nginx" 
    sudo nginx -s reload
  fi 
  
}

function config_apache(){
  domain=$1
  configFile=$2
  #echo "Apache Config File: $configFile"
  if [ -z "$configFile" ];then
    root=`sudo apachectl -V | grep -E 'HTTPD_ROOT' | awk -F '"' '{print $2}'`
    conf=`sudo apachectl -V | grep -E 'SERVER_CONFIG_FILE' | awk -F '"' '{print $2}'`
    configFile=$root/$conf
  fi 
  if [ ! -e "$configFile" ];then
    ctl=`ps -ef| grep httpd | awk -F' ' '{print $8}' | head -n1`
    root=`sudo $ctl -V | grep -E 'HTTPD_ROOT' | awk -F '"' '{print $2}'`
    conf=`sudo $ctl -V | grep -E 'SERVER_CONFIG_FILE' | awk -F '"' '{print $2}'`
    configFile=$root/$conf
  fi
  
  if [ -e "$configFile" ];then
    echo "... "
    echo "Apache setting... "
    echo "Config root: $configFile"
    set_config "$domain" "$configFile" "apache" 
    sudo service apache2 reload
  fi 
  
}

function set_config(){
    domain=$1
    confF=$2 
    confType=$3
    sudo cp -r $jockjsPath/jockjs-config/conf/jockjs-$confType-dev.conf $jockjsConfPath
    conf_path=$jockjsConfPath/jockjs-$confType-dev.conf
    
    if [ "$sys" = "Darwin" ];then
        sudo gsed -i s#SERVERNAME#$domain#g $conf_path 
        confLink=`echo $conf_path | gsed 's#\/#\\\/#g'`
        sudo gsed -i "/.*$confLink.*/"d $confF    
        if [ "confType" = "nginx" ];then
          sudo gsed -i "0,/include/s/.*include.*/    include $confLink;\n&/" $confF    
        else
          sudo gsed -i "0,/Include/s/.*Include.*/Include $confLink\n&/" $confF    
        fi
    else
        sudo sed -i s#SERVERNAME#$domain#g $conf_path
        confLink=`echo $conf_path | sed 's#\/#\\\/#g'`
        sudo sed -i "/.*$confLink.*/"d $confF    
        if [ "confType" = "nginx" ];then
          sudo sed -i "0,/include/s/.*include.*/    include $confLink;\n&/" $confF    
        else
          sudo sed -i "0,/Include/s/.*Include.*/Include $confLink\n&/" $confF    
        fi

        if [ "confType" = "apache" ];then
            sudo a2enmod rewrite proxy proxy_connect proxy_http
        fi
    fi
    echo "$confF is successful."
}

function config_link(){
  cLink=$1
  cFile=$2
  cType=$3
  if [ "$cType" = "nginx" ];then
    
  fi
}

function config_nginx_apache(){
  domain=$1
  configroot=$2
  if [[ "$configroot" =~ "nginx" ]];then
     config_nginx "$domain" "$configroot"
     exit;
  fi
  if [[ "$configroot" =~ "apache" || "$configroot" =~ "http" ]];then
     config_apache "$domain" "$configroot"
     exit;
  fi
  config_nginx "$domain" "$configroot"
  config_apache "$domain" "$configroot"
}

function nodejs_install(){
  #sudo apt-get -y update
  sudo apt-get -y install python-software-properties python g++ make
  if [ ! -e "/usr/local/bin/node" ];then
    cd $jockjsPath/jockjs-config/
    tar -zxf node-*
    cd node-*
    ./configure
    make
    sudo make install
    echo "Node install finished."
  fi
  if [ ! -e "/usr/local/bin/forever" ];then
    cd /usr/local/lib/node_modules
    sudo npm install forever -g
    echo "Forever install finished."
  fi
  if [ ! -e "/usr/local/lib/node_modules/UglifyJS" ];then
    cd /usr/local/lib/node_modules
    sudo git clone https://github.com/mishoo/UglifyJS.git
    echo "UglifyJS install finished."
    mkdir -p ~/.node_libraries
    if [ ! -e "~/.node_libraries/uglify-js.js" ];then
      sudo rm ~/.node_libraries/uglify-js.js
    fi
    ln -s /usr/local/lib/node_modules/UglifyJS/uglify-js.js ~/.node_libraries
  fi
}

function bash_install(){
  if [ ! -e ~/bin ];then
    mkdir -p ~/bin
    echo "Path ~/bin created."
  fi
  if [ ! -e ~/bin/jockjs ];then
    cp -r $jockjsPath/jockjs-config/jockjs ~/bin/jockjs
    echo "Copy files jockjs ..."
    sudo echo 'export PATH=~/bin:$PATH' >> ~/.profile
    source ~/.profile
  fi
  if [ ! -z "$three" ];then
    ~/bin/jockjs domain "$version" "$three" 
    echo "Base domian replaced."
  fi
}

function clean_install(){
  sudo rm -rf $jockjsConfPath 
  sudo rm -rf $jockjsPath
  sudo rm -rf ~/bin/jockjs
  echo "Jockjs cleand."
}

if [ "$commond" = "uninstall" ];then
   clean_install
   sudo rm -rf /usr/local/{bin/{node,npm,forever},lib/node_modules/npm,lib/node,share/man/*/node.*}
   sudo rm -rf ~/.node_libraries
   echo "Nodejs removed."
   exit 0
fi

if [ "$commond" = "install" ];then
   sudo mkdir -p $jockjsLogPath
   sudo chown -R $USER:$GROUP $jockjsLogPath

   if [ -z "$version" ];then
     echo "Missing parameters."
     exit;
   fi

   if [ "$version" = "clean" ];then
      clean_install
      exit 0
   fi

   if [ -z "$three" ];then
     echo "Please enter your base domain"
     echo "eg: install [touch | user | pad | developers | broker] jockjs.xxx.dev.anjuke.com"
   else
     git_install "$version"
     config_install "$version"
     bash_install
     nodejs_install
     sudo pkill node
     config_nginx_apache "$three" "$sconfigFile"
     sudo rm -rf $jockjsPath/jockjs-config
     ~/bin/jockjs start $version 
     ~/bin/jockjs pull $version checkout master
     echo ""
     echo "JockJs install is finished. "
     echo "Your JockJs workspace PATH : $jockjsPath"
     echo ""
     echo "Good luck. Bye! "
     echo ""
     echo ""
     echo ""
     echo ""
     echo ""
     echo ""
   fi
   exit 0
fi



if [[ "$commond" = "domain" && ! -z "$version" && ! -z "$three" ]];then
    cd $jockjsConfPath
    echo "$three,$version"
    
    if [ "$sys" = "Darwin" ];then
      gsed -i s#SERVERNAME#$three#g $version.js 
      gsed -i s#SERVERNAME#$three#g $version.css 
    else
      sed -i s#SERVERNAME#$three#g $version.js 
      sed -i s#SERVERNAME#$three#g $version.css 
    fi
    echo ""
    echo "Server Name change to : $three"
    exit 0
fi


if [[ "$commond" = "create" && ! -z "$version" ]];then
    v=${version:2:2}
    cd $jockjsPath
    rm -rf "$version"
    cp -r "$jockjsSite" "$version"
    git_co_master "$version"
    cd $jockjsConfPath
    cp "$jockjsSite".js "$version".js
    cp "$jockjsSite".css "$version".css
    sed -i s#$jockjsSite#$version#g "$version".js
    sed -i s#$jockjsSite#$version#g "$version".css
    sed -i s#52100#521$v#g "$version".js
    sed -i s#52200#522$v#g "$version".css
    echo ""
    echo "$version created. "
    exit
fi


if [ "$commond" = "pull" ];then
    if [ ! -z "$version" ];then
         git_pull "$version" "$three" "$4" "$5"
    else
         echo "use jockjs pull touch"
    fi
    exit 0 
fi


if [ "$commond" = "reload" -o "$commond" = "restart" -o "$commond" = "start" -o "$commond" = "stop" -o "$commond" = "list" ];then
    if [ "$commond" = "list" ];then
        forever_$commond
        exit
    fi 
    if [ ! -z "$version" ]; then 
        forever_action "$commond" "$version"
    else
        echo "Missing parameters."
    fi
else
    echo "use jockjs [restart|reload|stop|start|list|pull] [touch|pad|user|developers|broker]"
fi


